{"version":3,"sources":["papers/CFG.pdf","imgs/circle.png","imgs/headshot.jpg","imgs/CFG_capture.png","fonts/Poly-Regular.otf","fonts/Poly-Italic.otf","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Row","className","Col","xs","md","lg","Navbar","Nav","Link","Home","src","circle","alt","width","height","About","headshot","Projects","href","CFG","CFG_capture","Contact","App","Container","fluid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,iGCA3CD,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,yC,qMCsB3C,SAASC,IACP,OACE,kBAACC,EAAA,EAAD,CAAKC,UAAU,kBACb,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GACtB,kBAACC,EAAA,EAAD,CAAQL,UAAU,oBAChB,kBAACM,EAAA,EAAD,CAAKN,UAAU,SACb,kBAACM,EAAA,EAAIC,KAAL,CAAUP,UAAU,uBAApB,QACA,kBAACM,EAAA,EAAIC,KAAL,CAAUP,UAAU,uBAApB,SACA,kBAACM,EAAA,EAAIC,KAAL,CAAUP,UAAU,uBAApB,YACA,kBAACM,EAAA,EAAIC,KAAL,CAAUP,UAAU,uBAApB,eAQZ,SAASQ,IACP,OACE,oCACA,kBAACT,EAAA,EAAD,CAAKC,UAAU,WACf,kBAACD,EAAA,EAAD,CAAKC,UAAU,+BACb,yBAAKS,IAAKC,IAAQC,IAAI,GAAGC,MAAM,OAAOC,OAAO,SAC7C,kBAACZ,EAAA,EAAD,CAAKD,UAAU,uBACb,6CACA,qDAOR,SAASc,IACP,OACE,kBAACf,EAAA,EAAD,CAAKC,UAAU,SACb,kBAACC,EAAA,EAAD,CAAKD,UAAU,uBACb,yBAAKS,IAAKM,IAAUJ,IAAI,KACxB,sCACA,2QAKA,4GACA,wFACA,kFACA,0GAMR,SAASK,IACP,OACE,kBAACjB,EAAA,EAAD,CAAKC,UAAU,YACb,kBAACC,EAAA,EAAD,CAAMC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGJ,UAAU,uBACpC,yCAEF,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGJ,UAAU,uBACnC,yCAEF,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGJ,UAAU,uBACnC,4BAAI,uBAAGiB,KAAMC,KAAT,uDACJ,uBAAGD,KAAMC,KAAK,yBAAKT,IAAKU,IAAaR,IAAI,QAMjD,SAASS,IACP,OACE,kBAACrB,EAAA,EAAD,CAAKC,UAAU,mBACb,kBAACC,EAAA,EAAD,CAAKD,UAAU,uBACb,wCACA,2DAMOqB,MA5Ff,WACE,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACvB,UAAU,OACzB,kBAACF,EAAD,MACA,kBAACU,EAAD,MACA,kBAACM,EAAD,MACA,kBAACE,EAAD,MACA,kBAACI,EAAD,QCLcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7c8e70aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/CFG.5fee0136.pdf\";","module.exports = __webpack_public_path__ + \"static/media/circle.79a95dcc.png\";","module.exports = __webpack_public_path__ + \"static/media/headshot.3c98d2bf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/CFG_capture.dcb98a1d.png\";","module.exports = __webpack_public_path__ + \"static/media/Poly-Regular.c4792172.otf\";","module.exports = __webpack_public_path__ + \"static/media/Poly-Italic.9afbd7f8.otf\";","import React from 'react';\nimport { Container, Row, Col, Nav, Navbar } from 'react-bootstrap';\n\nimport circle from './imgs/circle.png';\nimport headshot from './imgs/headshot.jpg';\nimport CFG from './papers/CFG.pdf';\nimport CFG_capture from './imgs/CFG_capture.png';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Container fluid className=\"App\">\n      <Header />\n      <Home />\n      <About />\n      <Projects />\n      <Contact />\n    </Container>  \n  );\n}\n\nfunction Header() {\n  return (\n    <Row className=\"Header bg-dark\">\n      <Col xs={12} md={8} lg={6}>\n        <Navbar className=\"rounded bg-light\">\n          <Nav className=\"w-100\">\n            <Nav.Link className=\"text-secondary w-25\">HOME</Nav.Link>\n            <Nav.Link className=\"text-secondary w-25\">ABOUT</Nav.Link>\n            <Nav.Link className=\"text-secondary w-25\">PROJECTS</Nav.Link>\n            <Nav.Link className=\"text-secondary w-25\">CONTACT</Nav.Link>\n          </Nav>\n        </Navbar>\n      </Col>\n    </Row>\n  )\n}\n\nfunction Home() {\n  return (\n    <>\n    <Row className=\"Spacer\"></Row>\n    <Row className=\"Home justify-content-center\">\n      <img src={circle} alt=\"\" width=\"100%\" height=\"100%\" />\n      <Col className=\"text-center my-auto\">\n        <h1>Keith Johnson</h1>\n        <h2>Software Developer</h2>\n      </Col>\n    </Row>\n    </>\n  );\n}\n\nfunction About() {\n  return (\n    <Row className=\"About\">\n      <Col className=\"text-center my-auto\">\n        <img src={headshot} alt=\"\" />\n        <h2>Hello.</h2>\n        <h5>\n          My name is Keith, and I'm about to finish my last year as a student at The Ohio State University.\n          So, now I'm looking for an entry level position that will test my abilities as a software developer.\n          Here's what you can count on me for:\n        </h5>\n        <h5>I have plenty of programming languages under my belt, plus I can learn fast.</h5>\n        <h5>I have previous experience interning as a web developer.</h5>\n        <h5>I know how to be a team player and/or team leader.</h5>\n        <h5>I'm excited to enter the field to grow even more as a software engineer.</h5>\n      </Col>\n    </Row>\n  );\n}\n\nfunction Projects() {\n  return (\n    <Row className=\"Projects\">\n      <Col  xs={12} md={6} lg={4} className=\"text-center my-auto\">\n        <h5>Capstone</h5>\n      </Col>\n      <Col xs={12} md={6} lg={4} className=\"text-center my-auto\">\n        <h5>Lyfe App</h5>\n      </Col>\n      <Col xs={12} md={6} lg={4} className=\"text-center my-auto\">\n        <h5><a href={CFG}>Exploring Graph-based Methods in Malware Detection</a></h5>\n        <a href={CFG}><img src={CFG_capture} alt=\"\" /></a>\n      </Col>\n    </Row>\n  );\n}\n\nfunction Contact() {\n  return (\n    <Row className=\"Contact bg-dark\">\n      <Col className=\"text-center my-auto\">\n        <h2>Contact:</h2>\n        <p>email: john24144@gmail.com</p>\n      </Col>\n    </Row>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './fonts/Poly-Regular.otf';\nimport './fonts/Poly-Italic.otf';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}