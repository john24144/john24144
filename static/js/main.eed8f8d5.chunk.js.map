{"version":3,"sources":["fonts/Poly-Regular.otf","fonts/Poly-Italic.otf","App.js","serviceWorker.js","index.js","imgs/circle.png"],"names":["module","exports","Header","Row","className","Col","xs","md","lg","Nav","Link","Home","src","circle","alt","width","height","About","Projects","Contact","App","Container","fluid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wKAAAA,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,yC,yICiB3C,SAASC,IACP,OACE,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GACtB,kBAACC,EAAA,EAAD,CAAKL,UAAU,oBACb,kBAACK,EAAA,EAAIC,KAAL,CAAUN,UAAU,uBAApB,QACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,UAAU,uBAApB,SACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,UAAU,uBAApB,YACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,UAAU,uBAApB,cAOV,SAASO,IACP,OACE,kBAACR,EAAA,EAAD,CAAKC,UAAU,+BACb,yBAAKQ,IAAKC,IAAQC,IAAI,GAAGC,MAAM,OAAOC,OAAO,SAC7C,kBAACX,EAAA,EAAD,CAAKD,UAAU,uBACb,6CACA,oDAMR,SAASa,IACP,OACE,kBAACd,EAAA,EAAD,CAAKC,UAAU,SACb,kBAACC,EAAA,EAAD,CAAKD,UAAU,uBACb,sCACA,2QAKA,4GACA,wFACA,kFACA,0GAMR,SAASc,IACP,OACE,kBAACf,EAAA,EAAD,CAAKC,UAAU,YACb,kBAACC,EAAA,EAAD,CAAKD,UAAU,uBACb,0CAMR,SAASe,IACP,OACE,kBAAChB,EAAA,EAAD,CAAKC,UAAU,mBACb,kBAACC,EAAA,EAAD,KACE,wCACA,2DAMOe,MA/Ef,WACE,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAAClB,UAAU,OACzB,kBAACO,EAAD,MACA,kBAACT,EAAD,MACA,kBAACe,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,QCAcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5B1C,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.eed8f8d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Poly-Regular.c4792172.otf\";","module.exports = __webpack_public_path__ + \"static/media/Poly-Italic.9afbd7f8.otf\";","import React from 'react';\nimport { Container, Row, Col, Nav } from 'react-bootstrap';\nimport circle from './imgs/circle.png';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Container fluid className=\"App\">\n      <Home />\n      <Header />\n      <About />\n      <Projects />\n      <Contact />\n    </Container>  \n  );\n}\n\nfunction Header() {\n  return (\n    <Row className=\"bg-dark\">\n      <Col xs={12} md={8} lg={6}>\n        <Nav className=\"rounded bg-light\">\n          <Nav.Link className=\"text-secondary w-25\">HOME</Nav.Link>\n          <Nav.Link className=\"text-secondary w-25\">ABOUT</Nav.Link>\n          <Nav.Link className=\"text-secondary w-25\">PROJECTS</Nav.Link>\n          <Nav.Link className=\"text-secondary w-25\">CONTACT</Nav.Link>\n        </Nav>\n      </Col>\n    </Row>\n  )\n}\n\nfunction Home() {\n  return (\n    <Row className=\"Home justify-content-center\">\n      <img src={circle} alt=\"\" width=\"100%\" height=\"100%\" />\n      <Col className=\"text-center my-auto\">\n        <h1>Keith Johnson</h1>\n        <h2>Software Developer</h2>\n      </Col>\n    </Row>\n  );\n}\n\nfunction About() {\n  return (\n    <Row className=\"About\">\n      <Col className=\"text-center my-auto\">\n        <h2>Hello.</h2>\n        <h5>\n          My name is Keith, and I'm about to finish my last year as a student at The Ohio State University.\n          So, now I'm looking for an entry level position that will test my abilities as a software developer.\n          Here's what you can count on me for:\n        </h5>\n        <h5>I have plenty of programming languages under my belt, plus I can learn fast.</h5>\n        <h5>I have previous experience interning as a web developer.</h5>\n        <h5>I know how to be a team player and/or team leader.</h5>\n        <h5>I'm excited to enter the field to grow even more as a software engineer.</h5>\n      </Col>\n    </Row>\n  );\n}\n\nfunction Projects() {\n  return (\n    <Row className=\"Projects\">\n      <Col className=\"text-center my-auto\">\n        <h2>Projects</h2>\n      </Col>\n    </Row>\n  );\n}\n\nfunction Contact() {\n  return (\n    <Row className=\"Contact bg-dark\">\n      <Col>\n        <h2>Contact:</h2>\n        <p>email: john24144@gmail.com</p>\n      </Col>\n    </Row>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './fonts/Poly-Regular.otf';\nimport './fonts/Poly-Italic.otf';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/circle.79a95dcc.png\";"],"sourceRoot":""}